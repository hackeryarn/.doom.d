;;; private/org/config.el -*- lexical-binding: t; -*-

(map! :leader
      (:prefix "o"
        :desc "Org agenda" :n "a" #'org-agenda
        :desc "Org capture" :n "c" #'org-capture
        :desc "Inbox" :n "i" #'+org/open-inbox
        :desc "Journal" :n "j" #'+org/open-journal))

(after! org
  (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)

  ;; Refile
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets '(("~/Sync/gtd/todo.org" :level . 1)
                             ("~/Sync/gtd/work.org" :level . 1)))

  ;; Timer setup
  (add-to-list 'org-modules 'org-timer)
  (setq org-timer-default-timer 25)
  (add-hook 'org-clock-in-hook (lambda ()
      (if (not org-timer-current-timer)
      (org-timer-set-timer '(16)))))

  ;; active Org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;; other Babel languages
     (plantuml . t)
     (shell . t)))

  (setq org-plantuml-jar-path
        (expand-file-name "~/.doom.d/scripts/plantuml.jar"))

  ;; Agenda Custom Command

  (setq org-agenda-start-day "-1d")

  (defun create-org-agenda-skip-entry-if (tag)
    `'(org-agenda-skip-entry-if
       'notregexp ,(concat ":" (car tag) ":")))

  (defun create-task-agenda-custom-command (tag)
    (list 'todo
          "TODO"
          (list
           (list
            'org-agenda-skip-function
            (create-org-agenda-skip-entry-if tag))
           (list
            'org-agenda-overriding-header
            (capitalize (car tag))))))

  (defun create-home-agenda-custom-command (span)
    (list
     (list 'agenda ""
           (list
            (list 'org-agenda-span span)
            '(org-agenda-files '("~/Sync/gtd/todo.org"))))))

  (defun create-home-task-list ()
    '((todo "TODO"
        ((org-agenda-overriding-header "Todo")
            (org-agenda-todo-ignore-deadlines 'all)
            (org-agenda-todo-ignore-scheduled 'all)
            (org-agenda-files '("~/Sync/gtd/todo.org"))))
      (todo "WAITING"
        ((org-agenda-overriding-header "Waiting")
            (org-agenda-todo-ignore-deadlines 'all)
            (org-agenda-todo-ignore-scheduled 'all)
            (org-agenda-files '("~/Sync/gtd/todo.org"))))))

  (defun create-work-agenda-custom-command (span)
    (list
     (list 'agenda ""
           (list
            (list 'org-agenda-span span)
            '(org-agenda-files '("~/Sync/gtd/work.org"))))))

  (defun create-work-task-list ()
    '((todo "TODO"
        ((org-agenda-overriding-header "Todo")
            (org-agenda-todo-ignore-deadlines 'all)
            (org-agenda-todo-ignore-scheduled 'all)
            (org-agenda-files '("~/Sync/gtd/work.org"))))
      (todo "WAITING"
        ((org-agenda-overriding-header "Waiting")
            (org-agenda-todo-ignore-deadlines 'all)
            (org-agenda-todo-ignore-scheduled 'all)
            (org-agenda-files '("~/Sync/gtd/work.org"))))))

  (defun create-daily-home-agenda-custom-command ()
        (list "h" "Home" (append (create-home-agenda-custom-command 3)
                                  (create-home-task-list))))
  (defun create-daily-work-agenda-custom-command ()
        (list "w" "Work" (append (create-work-agenda-custom-command 3)
                                  (create-work-task-list))))

  (defun create-org-agenda-custom-commands ()
    (list (create-daily-home-agenda-custom-command)
          (create-daily-work-agenda-custom-command)
          (create-weekly-home-agenda-custom-command)
          (create-weekly-work-agenda-custom-command)))

  ;; Agenda
  (setq org-agenda-prefix-format " %b")
  (setq org-agenda-files '("~/Sync/gtd/todo.org"))
  (setq org-agenda-custom-commands (create-org-agenda-custom-commands))

  ;; Capture
  (setq-default org-todo-keywords '((sequence "TODO(t)" "SCHEDULED(s)" "WAITING(w)" "TALK(z)" "|" "DONE(d)" "CANCELLED(c)")
                                    (sequence "PROJECT(p)" "MAYBE(m)")))

  (defun create-tag-capture (tag)
    (let ((tag (car tag)))
      (list tag (capitalize tag) 'entry
            '(file "~/Sync/gtd/todo.org")
            (concat "* TODO %i%? :" tag ":"))))

  (defun org-template-project ()
    '("p" "Project" entry
      (file "~/Sync/gtd/todo.org")
      "* PROJECT %i%? [%]"))

  (defun org-template-talk ()
    '("z" "Talk" entry
      (file "~/Sync/gtd/todo.org")
      "* TALK %i%? :%^{who}:"))

  (defun org-template-todo ()
    '("i" "Inbox" entry
      (file "~/Sync/gtd/inbox.org")
      "* TODO %i%?"))

  (defun org-template-tickler ()
    '("T" "Tickler" entry
      (file "~/Sync/gtd/todo.org")
      "* SCHEDULED %i%? \n DEADLINE:%^{Deadline}t"))

  (defun org-template-journal ()
    '("j" "Journal" entry
      (file+olp+datetree "~/org/journal.org")
      "* %?" :tree-type week))

  (setq org-capture-templates (append
                               (mapcar #'create-tag-capture my-gtd-tags)
                               (list (org-template-todo)
                                     (org-template-journal)
                                     (org-template-talk)
                                     (org-template-project)
                                     (org-template-tickler)))))
